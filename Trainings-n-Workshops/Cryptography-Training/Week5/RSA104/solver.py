from Crypto.Util.number import *
import sympy as sp

n = 105890267045850058127224613005727042892090370900528111616116750941713524491595243225574901710563277001446927655715256310146258727150810723206017691349085122773201434781243527359865090330867064860510197142791410844208014823212254123468805674128819462058875933087509320900340117158480139266107343460010290048271
e = 65537
c = 24224004099903050137175223886942820294246425737618157898341875309618989769586637415699760911551747149403330503422430496859797479360828205058265912061131816600367696528538072324034446305421461098856760848624435643098782602762022032396941315141637082970870338341436137065085804295143248457362333422927685365367
phi = 105890267045850058127224613005727042892090370900528111616116750941713524491595243225574901710563277001446927655715256310146258727150810723206017691349085143363442738979903078308297623063882791893759447015449186241895022480069638762486198206712419213202965102478073946527987627485771779504689907017218979657000


p = sp.symbols('p')
q = sp.symbols('q')

eq1 = sp.Eq(p*q, n)
eq2 = sp.Eq((p+1)*(q+1), phi)

sol = sp.solve((eq1, eq2), (p, q))

p = int(sol[0][0])

q = int(sol[0][1])

phi = (p-1)*(q-1)

d = inverse(e, phi)
m = pow(c, d, n)

print(long_to_bytes(m))